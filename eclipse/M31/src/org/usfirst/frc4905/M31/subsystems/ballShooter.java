// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4905.M31.subsystems;

import java.awt.Robot;

import org.usfirst.frc4905.M31.OI;
import org.usfirst.frc4905.M31.RobotMap;
import org.usfirst.frc4905.M31.commands.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.hal.HAL;
import edu.wpi.first.wpilibj.hal.HALUtil;


/**
 *
 */
public class ballShooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon shooterMotor = RobotMap.ballShootershooterMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Shoot());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        
    }
    
    double targetSpeed = 0; 
    
   public void setSpeed(){
	   shooterMotor.reverseSensor(true);
	   shooterMotor.changeControlMode(TalonControlMode.Speed);;
	   shooterMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
	   shooterMotor.configEncoderCodesPerRev(48);
	   shooterMotor.setP(01);
	   shooterMotor.set(40);
	   
   }
   
   public void debug(){
	   System.out.println(shooterMotor.getSpeed());
   }
   
   public void amAtSpeed(){
	   
   }
   
   public void testShoot(Joystick driveGamepad){
	   double speed = OI.getLeftStickVertical(driveGamepad);
	   shooterMotor.set(speed);
   }
   
   public CANTalon getShooterMotor(){
	   return shooterMotor;
   }
   public void shootWithPID(Joystick driveGamepad){
	   double leftYStick = OI.getLeftStickVertical(driveGamepad);
	   
       if(OI.getAButton(driveGamepad)){
       	
       	shooterMotor.changeControlMode(TalonControlMode.Speed);
       	shooterMotor.set(targetSpeed);
       	
       	System.out.print("Error: " + shooterMotor.getClosedLoopError() 
       	+ " ttrg: " + targetSpeed + 
       	" Time: " + HALUtil.getFPGATime());;
       } else {
       		if(leftYStick > 0.1){
       			targetSpeed++;
       		}else if(leftYStick < -0.1){
       			targetSpeed--;
       		}
    	   System.out.println("Target Speed: " + targetSpeed);
    	  
       	  
       	 shooterMotor.changeControlMode(TalonControlMode.PercentVbus);
       	shooterMotor.set(0);//this is here to stop it when A button is not pressed. if we want it to go, use leftYStick*1020 as param
    	   
       }
       System.out.println(" Talonspd:" + shooterMotor.getSpeed());
       
       
   }
}

