// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4905.M31;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc4905.M31.commands.*;
import org.usfirst.frc4905.M31.subsystems.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
	private static Preferences prefs = Preferences.getInstance();
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static ballShooter ballShooter;
    public static UltraSonic ultraSonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double driveP;
    public double driveF;
    CANTalon _test = new CANTalon(6);
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        ballShooter = new ballShooter();
        ultraSonic = new UltraSonic();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveP = prefs.getDouble("DriveP", 4);
        driveF = prefs.getDouble("DriveF", 5);
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new comboMove();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        /* test code below for shooter motor, the version that works with ballShooter subsystem
         * is uncommented.
        
        _test.changeControlMode(TalonControlMode.Speed);
        _test.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        _test.reverseSensor(true);
        _test.configEncoderCodesPerRev(48);
        _test.setProfile(0);
        _test.setP(2);
        _test.setI(0);
        _test.setD(0);
        _test.setF(3.14);*/
        Robot.ballShooter.getShooterMotor().changeControlMode(TalonControlMode.Speed);
        Robot.ballShooter.getShooterMotor().setFeedbackDevice(FeedbackDevice.QuadEncoder);
        Robot.ballShooter.getShooterMotor().reverseSensor(true);
        Robot.ballShooter.getShooterMotor().configEncoderCodesPerRev(48);
        Robot.ballShooter.getShooterMotor().setProfile(0);
        Robot.ballShooter.getShooterMotor().setP(11);
        Robot.ballShooter.getShooterMotor().setI(0);
        Robot.ballShooter.getShooterMotor().setD(0);
        Robot.ballShooter.getShooterMotor().setF(3);
        for (int x = 0; x < 4; x++) {
        	Robot.driveTrain.getCANTal(x).setP(driveP);
        	Robot.driveTrain.getCANTal(x).setF(driveF);
        }
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
      /*
       * test code for shooter
       * double leftYStick = Robot.oi.getDriveController().getRawAxis(1);
       
        if(Robot.oi.getDriveController().getRawButton(1)){
        	double targetSpeed = leftYStick * 1020;
        	_test.changeControlMode(TalonControlMode.Speed);
        	_test.set(300);
        	
        	System.out.print("Error: " + _test.getClosedLoopError() +" ttrg: " + 300);;
        } else {
        	_test.changeControlMode(TalonControlMode.PercentVbus);
        	_test.set(leftYStick);
        }
        System.out.println(" Talonspd:" + _test.getSpeed());
       */
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
